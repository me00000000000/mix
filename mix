#!/usr/bin/env python3

import shutil
import os
import sys
import argparse
import getpass
import secrets
from pathlib import Path
from argon2.low_level import hash_secret_raw, Type
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import hmac, hashes
from cryptography.hazmat.backends import default_backend

KEY_LEN = 64
SALT_LEN = 16
IV_LEN = 16
HMAC_TAG_LEN = 32
CHUNK_SIZE = 64 * 1024

PARAMS = {
    "mix": {
        "magic": bytes.fromhex("116d6978"),
        "time_cost": 3,
        "memory_cost": 2097152,
        "parallelism": 1
    },
    "mix-paranoid": {
        "magic": bytes.fromhex("116d69786e6f6964"),
        "time_cost": 8,
        "memory_cost": 2097152,
        "parallelism": 1
    },
    "mix-lite": {
        "magic": bytes.fromhex("116d69786c697465"),
        "time_cost": 1,
        "memory_cost": 8,
        "parallelism": 1
    }
}

def derive_key(password: bytes, salt: bytes, time_cost: int, memory_cost: int, parallelism: int) -> bytes:
    return hash_secret_raw(
        secret=password,
        salt=salt,
        time_cost=time_cost,
        memory_cost=memory_cost,
        parallelism=parallelism,
        hash_len=KEY_LEN,
        type=Type.ID
    )

def get_password(confirm: bool = False, use_stdin: bool = False) -> bytes:
    if use_stdin and not sys.stdin.isatty():
        pwd = sys.stdin.read().strip()
        if pwd:
            return pwd.encode('utf-8')
    if confirm:
        pwd1 = getpass.getpass("Enter password: ")
        pwd2 = getpass.getpass("Confirm password: ")
        if pwd1 != pwd2:
            print("Passwords do not match.", file=sys.stderr)
            sys.exit(1)
        return pwd1.encode('utf-8')
    return getpass.getpass("Enter password: ").encode('utf-8')

def get_decryption_params(data: bytes):
    if data.startswith(PARAMS["mix-paranoid"]["magic"]):
        return ("mix-paranoid", PARAMS["mix-paranoid"]["magic"], len(PARAMS["mix-paranoid"]["magic"]),
                PARAMS["mix-paranoid"]["time_cost"], PARAMS["mix-paranoid"]["memory_cost"], PARAMS["mix-paranoid"]["parallelism"])
    elif data.startswith(PARAMS["mix-lite"]["magic"]):
        return ("mix-lite", PARAMS["mix-lite"]["magic"], len(PARAMS["mix-lite"]["magic"]),
                PARAMS["mix-lite"]["time_cost"], PARAMS["mix-lite"]["memory_cost"], PARAMS["mix-lite"]["parallelism"])
    elif data.startswith(PARAMS["mix"]["magic"]):
        return ("mix", PARAMS["mix"]["magic"], len(PARAMS["mix"]["magic"]),
                PARAMS["mix"]["time_cost"], PARAMS["mix"]["memory_cost"], PARAMS["mix"]["parallelism"])
    else:
        return None

def encrypt_file(input_path: Path, force: bool, preserve: bool, to_stdout: bool, use_stdin: bool):
    password = get_password(confirm=True, use_stdin=use_stdin)
    salt = secrets.token_bytes(SALT_LEN)
    iv = secrets.token_bytes(IV_LEN)
    program_name = os.path.basename(sys.argv[0])
    params = PARAMS.get(program_name, PARAMS["mix"])
    key_material = derive_key(password, salt, params["time_cost"], params["memory_cost"], params["parallelism"])
    enc_key = key_material[:32]
    mac_key = key_material[32:]
    backend = default_backend()
    cipher = Cipher(algorithms.AES(enc_key), modes.CTR(iv), backend=backend)
    encryptor = cipher.encryptor()
    header = params["magic"] + salt + iv
    h = hmac.HMAC(mac_key, hashes.SHA256(), backend=backend)
    h.update(header)
    if to_stdout:
        out_file = sys.stdout.buffer
    else:
        output_path = input_path.with_name(input_path.name + ".mix")
        if output_path.is_file() and not force:
            print(f"Error: Output file {output_path} already exists. Use -f to force overwrite.", file=sys.stderr)
            sys.exit(1)
        out_file = output_path.open("wb")
    try:
        out_file.write(header)
        with input_path.open("rb") as in_file:
            while True:
                chunk = in_file.read(CHUNK_SIZE)
                if not chunk:
                    break
                ct_chunk = encryptor.update(chunk)
                out_file.write(ct_chunk)
                h.update(ct_chunk)
        tag = h.finalize()
        out_file.write(tag)
    finally:
        if not to_stdout:
            out_file.close()
    if not to_stdout:
        if preserve:
            shutil.copystat(input_path, output_path)
        print(f"Encryption successful. Output written to {output_path}")

def decrypt_file(input_path: Path, force: bool, preserve: bool, to_stdout: bool, use_stdin: bool):
    try:
        in_file = input_path.open("rb")
    except Exception as e:
        print(f"Error reading input file: {e}", file=sys.stderr)
        sys.exit(1)

    out_file = None

    try:
        max_magic_len = max(len(PARAMS["mix"]["magic"]), len(PARAMS["mix-paranoid"]["magic"]), len(PARAMS["mix-lite"]["magic"]))
        header_candidate = in_file.read(max_magic_len)
        params_tuple = get_decryption_params(header_candidate)
        if params_tuple is None:
            print("Error: Unknown file format.", file=sys.stderr)
            sys.exit(1)
        header_type, magic, magic_len, time_cost, memory_cost, parallelism = params_tuple
        header_len = magic_len + SALT_LEN + IV_LEN
        in_file.seek(0)
        header = in_file.read(header_len)
        salt = header[magic_len:magic_len+SALT_LEN]
        iv = header[magic_len+SALT_LEN:header_len]
        password = get_password(confirm=False, use_stdin=use_stdin)
        key_material = derive_key(password, salt, time_cost, memory_cost, parallelism)
        enc_key = key_material[:32]
        mac_key = key_material[32:]
        backend = default_backend()
        h = hmac.HMAC(mac_key, hashes.SHA256(), backend=backend)
        h.update(header)
        total_size = input_path.stat().st_size
        ct_len = total_size - header_len - HMAC_TAG_LEN
        cipher = Cipher(algorithms.AES(enc_key), modes.CTR(iv), backend=backend)
        decryptor = cipher.decryptor()

        if to_stdout:
            out_file = sys.stdout.buffer
        else:
            if input_path.suffix == ".mix":
                output_path = input_path.with_suffix("")
            else:
                output_path = input_path.with_name(input_path.name + ".dec")
            if output_path.is_file() and not force:
                print(f"Error: Output file {output_path} already exists. Use -f to force overwrite.", file=sys.stderr)
                sys.exit(1)
            out_file = output_path.open("wb")

        remaining = ct_len
        while remaining > 0:
            chunk_size = min(CHUNK_SIZE, remaining)
            ct_chunk = in_file.read(chunk_size)
            if not ct_chunk:
                break
            remaining -= len(ct_chunk)
            h.update(ct_chunk)
            pt_chunk = decryptor.update(ct_chunk)
            out_file.write(pt_chunk)

        file_tag = in_file.read(HMAC_TAG_LEN)
        try:
            h.verify(file_tag)
        except Exception:
            print("Decryption failed: HMAC verification error. Possibly incorrect password or corrupted data.", file=sys.stderr)
            sys.exit(1)

    finally:
        in_file.close()
        if out_file and not to_stdout:
            out_file.close()

    if not to_stdout:
        if preserve:
            shutil.copystat(input_path, output_path)
        print(f"Decryption successful. Output written to {output_path}")

def encrypt_data(plaintext: bytes, use_stdin: bool) -> bytes:
    password = get_password(confirm=True, use_stdin=use_stdin)
    salt = secrets.token_bytes(SALT_LEN)
    iv = secrets.token_bytes(IV_LEN)
    program_name = os.path.basename(sys.argv[0])
    params = PARAMS.get(program_name, PARAMS["mix"])
    key_material = derive_key(password, salt, params["time_cost"], params["memory_cost"], params["parallelism"])
    enc_key = key_material[:32]
    mac_key = key_material[32:]
    backend = default_backend()
    cipher = Cipher(algorithms.AES(enc_key), modes.CTR(iv), backend=backend)
    encryptor = cipher.encryptor()
    header = params["magic"] + salt + iv
    h = hmac.HMAC(mac_key, hashes.SHA256(), backend=backend)
    h.update(header)
    ciphertext = encryptor.update(plaintext)
    h.update(ciphertext)
    tag = h.finalize()
    return header + ciphertext + tag

def decrypt_data(data: bytes, use_stdin: bool) -> bytes:
    magic_len_candidate = max(len(PARAMS["mix"]["magic"]), len(PARAMS["mix-paranoid"]["magic"]), len(PARAMS["mix-lite"]["magic"]))
    header_candidate = data[:magic_len_candidate]
    params_tuple = get_decryption_params(header_candidate)
    if params_tuple is None:
        print("Error: Unknown data format.", file=sys.stderr)
        sys.exit(1)
    header_type, magic, magic_len, time_cost, memory_cost, parallelism = params_tuple
    header_len = magic_len + SALT_LEN + IV_LEN
    header = data[:header_len]
    salt = header[magic_len:magic_len+SALT_LEN]
    iv = header[magic_len+SALT_LEN:header_len]
    password = get_password(confirm=False, use_stdin=use_stdin)
    key_material = derive_key(password, salt, time_cost, memory_cost, parallelism)
    enc_key = key_material[:32]
    mac_key = key_material[32:]
    backend = default_backend()
    h = hmac.HMAC(mac_key, hashes.SHA256(), backend=backend)
    h.update(header)
    tag = data[-HMAC_TAG_LEN:]
    ciphertext = data[header_len:-HMAC_TAG_LEN]
    h.update(ciphertext)
    try:
        h.verify(tag)
    except Exception as e:
        print("Decryption failed: HMAC verification error. Possibly incorrect password or corrupted data.", file=sys.stderr)
        sys.exit(1)
    cipher = Cipher(algorithms.AES(enc_key), modes.CTR(iv), backend=backend)
    decryptor = cipher.decryptor()
    plaintext = decryptor.update(ciphertext)
    return plaintext

def main():
    parser = argparse.ArgumentParser(
        description="Encrypt or decrypt files using AES-CTR with HMAC authentication and Argon2id. "
                    "If piped input is available (and -P is not used), it is used as the input data."
    )
    parser.add_argument("input", type=Path, nargs="?", help="Input file (ignored if piped input is available)")
    parser.add_argument("-f", "--force", action="store_true", help="force overwrite of output file")
    parser.add_argument("-p", "--preserve", action="store_true", help="preserve original timestamps")
    parser.add_argument("-o", "--stdout", action="store_true", help="output the result to STDOUT instead of a file")
    parser.add_argument("-P", "--password-stdin", action="store_true", help="read password from STDIN")
    args = parser.parse_args()

    if not args.password_stdin and not sys.stdin.isatty():
        input_data = sys.stdin.buffer.read()
        if not args.stdout:
            print("Error: When piping input data, the -o/--stdout flag must be provided.", file=sys.stderr)
            sys.exit(1)
        if get_decryption_params(input_data) is not None:
            try:
                plaintext = decrypt_data(input_data, use_stdin=False)
            except Exception:
                print("Decryption failed. Possibly incorrect password or corrupted data.", file=sys.stderr)
                sys.exit(1)
            try:
                sys.stdout.buffer.write(plaintext)
            except Exception as e:
                print(f"Error writing to STDOUT: {e}", file=sys.stderr)
                sys.exit(1)
        else:
            try:
                output_data = encrypt_data(input_data, use_stdin=False)
            except Exception as e:
                print(f"Encryption failed: {e}", file=sys.stderr)
                sys.exit(1)
            try:
                sys.stdout.buffer.write(output_data)
            except Exception as e:
                print(f"Error writing to STDOUT: {e}", file=sys.stderr)
                sys.exit(1)
    else:
        if args.input is None:
            print("Error: No input file specified.", file=sys.stderr)
            sys.exit(1)
        if not args.input.exists():
            print(f"Error: Input file {args.input} does not exist.", file=sys.stderr)
            sys.exit(1)
        try:
            with args.input.open("rb") as f:
                header_candidate = f.read(max(len(PARAMS["mix"]["magic"]), len(PARAMS["mix-paranoid"]["magic"]), len(PARAMS["mix-lite"]["magic"])))
        except Exception as e:
            print(f"Error reading input file: {e}", file=sys.stderr)
            sys.exit(1)
        if get_decryption_params(header_candidate) is not None:
            decrypt_file(args.input, args.force, args.preserve, args.stdout, args.password_stdin)
        else:
            encrypt_file(args.input, args.force, args.preserve, args.stdout, args.password_stdin)

if __name__ == "__main__":
    main()
