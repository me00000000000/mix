#!/usr/bin/env python3

import shutil
import os
import sys
import argparse
import getpass
import secrets
from pathlib import Path
from cryptography.hazmat.primitives.ciphers.aead import AESGCM
from argon2.low_level import hash_secret_raw, Type

PARAMS = {
    "mix": {
        "magic": bytes.fromhex("116d6978"),
        "time_cost": 3,
        "memory_cost": 2097152,
        "parallelism": 1
    },
    "mix-paranoid": {
        "magic": bytes.fromhex("116d69786e6f6964"),
        "time_cost": 8,
        "memory_cost": 2097152,
        "parallelism": 1
    },
    "mix-lite": {
        "magic": bytes.fromhex("116d69786c697465"),
        "time_cost": 1,
        "memory_cost": 8,
        "parallelism": 1
    }
}

SALT_LEN = 16
NONCE_LEN = 12
KEY_LEN = 32

def derive_key(password: bytes, salt: bytes, time_cost: int, memory_cost: int, parallelism: int) -> bytes:
    return hash_secret_raw(
        secret=password,
        salt=salt,
        time_cost=time_cost,
        memory_cost=memory_cost,
        parallelism=parallelism,
        hash_len=KEY_LEN,
        type=Type.ID
    )

def get_password(confirm: bool = False, use_stdin: bool = False) -> bytes:
    if use_stdin and not sys.stdin.isatty():
        pwd = sys.stdin.read().strip()
        if pwd:
            return pwd.encode('utf-8')
    if confirm:
        pwd1 = getpass.getpass("Enter password: ")
        pwd2 = getpass.getpass("Confirm password: ")
        if pwd1 != pwd2:
            print("Passwords do not match.", file=sys.stderr)
            sys.exit(1)
        return pwd1.encode('utf-8')
    return getpass.getpass("Enter password: ").encode('utf-8')

def get_decryption_params(data: bytes):
    if data.startswith(PARAMS["mix-paranoid"]["magic"]):
        return ("mix-paranoid", PARAMS["mix-paranoid"]["magic"], len(PARAMS["mix-paranoid"]["magic"]),
                PARAMS["mix-paranoid"]["time_cost"], PARAMS["mix-paranoid"]["memory_cost"], PARAMS["mix-paranoid"]["parallelism"])
    elif data.startswith(PARAMS["mix-lite"]["magic"]):
        return ("mix-lite", PARAMS["mix-lite"]["magic"], len(PARAMS["mix-lite"]["magic"]),
                PARAMS["mix-lite"]["time_cost"], PARAMS["mix-lite"]["memory_cost"], PARAMS["mix-lite"]["parallelism"])
    elif data.startswith(PARAMS["mix"]["magic"]):
        return ("mix", PARAMS["mix"]["magic"], len(PARAMS["mix"]["magic"]),
                PARAMS["mix"]["time_cost"], PARAMS["mix"]["memory_cost"], PARAMS["mix"]["parallelism"])
    else:
        return None

def encrypt_file(input_path: Path, force: bool, preserve: bool, to_stdout: bool, use_stdin: bool):
    try:
        plaintext = input_path.read_bytes()
    except Exception as e:
        print(f"Error reading input file: {e}", file=sys.stderr)
        sys.exit(1)
    password = get_password(confirm=True, use_stdin=use_stdin)
    salt = secrets.token_bytes(SALT_LEN)
    nonce = secrets.token_bytes(NONCE_LEN)
    program_name = os.path.basename(sys.argv[0])
    params = PARAMS.get(program_name, PARAMS["mix"])
    key = derive_key(password, salt, params["time_cost"], params["memory_cost"], params["parallelism"])
    aesgcm = AESGCM(key)
    ciphertext = aesgcm.encrypt(nonce, plaintext, associated_data=None)
    output_data = params["magic"] + salt + nonce + ciphertext

    if to_stdout:
        try:
            sys.stdout.buffer.write(output_data)
        except Exception as e:
            print(f"Error writing to STDOUT: {e}", file=sys.stderr)
            sys.exit(1)
    else:
        output_path = input_path.with_name(input_path.name + ".mix")
        if output_path.is_file() and not force:
            print(f"Error: Output file {output_path} already exists. Use -f to force overwrite.", file=sys.stderr)
            sys.exit(1)
        try:
            output_path.write_bytes(output_data)
            if preserve:
                shutil.copystat(input_path, output_path)
            print(f"Encryption successful. Output written to {output_path}")
        except Exception as e:
            print(f"Error writing output file: {e}", file=sys.stderr)
            sys.exit(1)

def decrypt_file(input_path: Path, force: bool, preserve: bool, to_stdout: bool, use_stdin: bool):
    try:
        data = input_path.read_bytes()
    except Exception as e:
        print(f"Error reading input file: {e}", file=sys.stderr)
        sys.exit(1)
    params_tuple = get_decryption_params(data)
    header_type, magic, magic_len, time_cost, memory_cost, parallelism = params_tuple
    print(f"Header type found: {header_type}", file=sys.stderr)
    pos = magic_len
    salt = data[pos:pos+SALT_LEN]
    pos += SALT_LEN
    nonce = data[pos:pos+NONCE_LEN]
    pos += NONCE_LEN
    ciphertext = data[pos:]
    password = get_password(confirm=False, use_stdin=use_stdin)
    key = derive_key(password, salt, time_cost, memory_cost, parallelism)
    aesgcm = AESGCM(key)
    try:
        plaintext = aesgcm.decrypt(nonce, ciphertext, associated_data=None)
    except Exception as e:
        print("Decryption failed. Possibly incorrect password or corrupted data.", file=sys.stderr)
        sys.exit(1)
    if to_stdout:
        try:
            sys.stdout.buffer.write(plaintext)
        except Exception as e:
            print(f"Error writing to STDOUT: {e}", file=sys.stderr)
            sys.exit(1)
    else:
        output_path = input_path.with_suffix("")
        if output_path.is_file() and not force:
            print(f"Error: Output file {output_path} already exists. Use -f to force overwrite.", file=sys.stderr)
            sys.exit(1)
        try:
            output_path.write_bytes(plaintext)
            if preserve:
                shutil.copystat(input_path, output_path)
            print(f"Decryption successful. Output written to {output_path}")
        except Exception as e:
            print(f"Error writing output file: {e}", file=sys.stderr)
            sys.exit(1)

def encrypt_data(plaintext: bytes, use_stdin: bool) -> bytes:
    password = get_password(confirm=True, use_stdin=use_stdin)
    salt = secrets.token_bytes(SALT_LEN)
    nonce = secrets.token_bytes(NONCE_LEN)
    program_name = os.path.basename(sys.argv[0])
    params = PARAMS.get(program_name, PARAMS["mix"])
    key = derive_key(password, salt, params["time_cost"], params["memory_cost"], params["parallelism"])
    aesgcm = AESGCM(key)
    ciphertext = aesgcm.encrypt(nonce, plaintext, associated_data=None)
    return params["magic"] + salt + nonce + ciphertext

def decrypt_data(data: bytes, use_stdin: bool) -> bytes:
    params_tuple = get_decryption_params(data)
    header_type, magic, magic_len, time_cost, memory_cost, parallelism = params_tuple
    print(f"Header type found: {header_type}", file=sys.stderr)
    pos = magic_len
    salt = data[pos:pos+SALT_LEN]
    pos += SALT_LEN
    nonce = data[pos:pos+NONCE_LEN]
    pos += NONCE_LEN
    ciphertext = data[pos:]
    password = get_password(confirm=False, use_stdin=use_stdin)
    key = derive_key(password, salt, time_cost, memory_cost, parallelism)
    aesgcm = AESGCM(key)
    return aesgcm.decrypt(nonce, ciphertext, associated_data=None)

def main():
    parser = argparse.ArgumentParser(
        description="Encrypt or decrypt files using AES-GCM and Argon2id. "
                    "If piped input is available (and -P is not used), it is used as the input data."
    )
    parser.add_argument("input", type=Path, nargs="?", help="Input file (ignored if piped input is available)")
    parser.add_argument("-f", "--force", action="store_true", help="force overwrite of output file")
    parser.add_argument("-p", "--preserve", action="store_true", help="preserve original timestamps")
    parser.add_argument("-o", "--stdout", action="store_true", help="output the result to STDOUT instead of a file")
    parser.add_argument("-P", "--password-stdin", action="store_true", help="read password from STDIN")
    args = parser.parse_args()

    if not args.password_stdin and not sys.stdin.isatty():
        input_data = sys.stdin.buffer.read()
        if not args.stdout:
            print("Error: When piping input data, the -o/--stdout flag must be provided.", file=sys.stderr)
            sys.exit(1)
        if get_decryption_params(input_data) is not None:
            try:
                plaintext = decrypt_data(input_data, use_stdin=False)
            except Exception:
                print("Decryption failed. Possibly incorrect password or corrupted data.", file=sys.stderr)
                sys.exit(1)
            try:
                sys.stdout.buffer.write(plaintext)
            except Exception as e:
                print(f"Error writing to STDOUT: {e}", file=sys.stderr)
                sys.exit(1)
        else:
            try:
                output_data = encrypt_data(input_data, use_stdin=False)
            except Exception as e:
                print(f"Encryption failed: {e}", file=sys.stderr)
                sys.exit(1)
            try:
                sys.stdout.buffer.write(output_data)
            except Exception as e:
                print(f"Error writing to STDOUT: {e}", file=sys.stderr)
                sys.exit(1)
    else:
        if args.input is None:
            print("Error: No input file specified.", file=sys.stderr)
            sys.exit(1)
        if not args.input.exists():
            print(f"Error: Input file {args.input} does not exist.", file=sys.stderr)
            sys.exit(1)
        try:
            with args.input.open("rb") as f:
                header = f.read(8)
        except Exception as e:
            print(f"Error reading input file: {e}", file=sys.stderr)
            sys.exit(1)
        if get_decryption_params(header) is not None:
            decrypt_file(args.input, args.force, args.preserve, args.stdout, args.password_stdin)
        else:
            encrypt_file(args.input, args.force, args.preserve, args.stdout, args.password_stdin)

if __name__ == "__main__":
    main()
