#!/usr/bin/env python3

import sys
import argparse
from pathlib import Path

KEY_LEN = 64
SALT_LEN = 16
IV_LEN = 16
HMAC_TAG_LEN = 32
CHUNK_SIZE = 64 * 1024

PARAMS = {
    "mix": {
        "magic": bytes.fromhex("116d6978"),
        "time_cost": 4,
        "memory_cost": 131072,
        "parallelism": 4
    },
    "mix-paranoid": {
        "magic": bytes.fromhex("116d69786e6f6964"),
        "time_cost": 8,
        "memory_cost": 2097152,
        "parallelism": 4
    },
    "mix-lite": {
        "magic": bytes.fromhex("116d69786c697465"),
        "time_cost": 1,
        "memory_cost": 8,
        "parallelism": 1
    }
}

def dump(input_path: Path):
    try:
        data = input_path.read_bytes()
    except Exception as e:
        print(f"Error reading input file: {e}", file=sys.stderr)
        sys.exit(1)

    header = None
    for name, params in sorted(PARAMS.items(), key=lambda item: len(item[1]["magic"]), reverse=True):
        magic = params["magic"]
        if data.startswith(magic):
            header = name
            header_len = len(magic)
            time_cost = params["time_cost"]
            memory_cost = params["memory_cost"]
            parallelism = params["parallelism"]
            break

    if header is None:
        print("Error: File is not a mix encrypted file.", file=sys.stderr)
        sys.exit(1)

    print(f"Header  {header}")

    pos = header_len
    salt = data[pos:pos+SALT_LEN]
    pos += SALT_LEN
    iv = data[pos:pos+IV_LEN]
    pos += IV_LEN
    ciphertext = data[pos:-HMAC_TAG_LEN]
    hmac_tag = data[-HMAC_TAG_LEN:]

    salt_str = ' '.join(salt.hex()[i:i+2] for i in range(0, len(salt.hex()), 2))
    iv_str = ' '.join(iv.hex()[i:i+2] for i in range(0, len(iv.hex()), 2))

    print(f"Salt    {salt_str}")
    print(f"IV      {iv_str}")
    print(f"Cipher  {len(ciphertext)} bytes")
    print(f"HMAC    {len(hmac_tag)} bytes")
    print("Algo    AES-CTR + HMAC")
    print("PBKDF   Argon2id")
    print(f"MEMORY  {memory_cost} bytes")
    print(f"TIME    {time_cost} iterations")
    print(f"PARALL  {parallelism} threads")

def main():
    parser = argparse.ArgumentParser(description="Dump information about mix encrypted files.")
    parser.add_argument("input", type=Path, help="Input file")
    args = parser.parse_args()
    dump(args.input)

if __name__ == "__main__":
    main()
