#!/usr/bin/env python3

import sys
import argparse
from pathlib import Path

MAGIC = bytes.fromhex("116d6978")
MAGIC_LEN = len(MAGIC)
SALT_LEN = 16
NONCE_LEN = 12
    
def dump(input_path: Path):
    try:
        data = input_path.read_bytes()
    except Exception as e:
        print(f"Error reading input file: {e}")
        sys.exit(1)

    if not data.startswith(MAGIC):
        print("Error: File is not a mix encrypted file.")
        sys.exit(1)

    pos = MAGIC_LEN
    salt = data[pos:pos+SALT_LEN]    
    salt_hex = salt.hex()
    print("Salt    ", end="")
    formatted_salt = " ".join(salt_hex[i:i+2] for i in range(0, len(salt_hex), 2))
    print(formatted_salt)
    pos += SALT_LEN

    nonce = data[pos:pos+NONCE_LEN]
    nonce_hex = nonce.hex()
    formatted_nonce = " ".join(nonce_hex[i:i+2] for i in range(0, len(nonce_hex), 2))
    print("Nonce  ", formatted_nonce)
    pos += NONCE_LEN

    ciphertext = data[pos:]
    print("Cipher ", len(data[pos:]), "bytes")

    print("Algo   ", "AES-GCM")
    print("PBKDF  ", "Argon2id")
    print("MEMORY ", "2097152")
    print("TIME   ", "3")
    print("PARALL ", "1")    

def main():
    parser = argparse.ArgumentParser(description="Dump information abuot mix encrypted files.")
    parser.add_argument("input", type=Path, help="Input file")
    args = parser.parse_args()
    try:
        with args.input.open("rb") as f:
            header = f.read(MAGIC_LEN)
    except Exception as e:
        print(f"Error reading input file: {e}")
        sys.exit(1)
    dump(args.input)

if __name__ == "__main__":
    main()
