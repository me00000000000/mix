#!/usr/bin/env python3

import sys
import argparse
from pathlib import Path

MAGIC = bytes.fromhex("116d6978")
MAGIC_LITE = bytes.fromhex("116d69786c697465")
MAGIC_PARANOID = bytes.fromhex("116d69786e6f6964")
SALT_LEN = 16
NONCE_LEN = 16
HMAC_TAG_LEN = 32

def dump(input_path: Path):
    try:
        data = input_path.read_bytes()
    except Exception as e:
        print(f"Error reading input file: {e}", file=sys.stderr)
        sys.exit(1)

    if data.startswith(MAGIC_LITE):
        header = "mix-lite"
        header_len = len(MAGIC_LITE)
        memory, time = 8, 1
    elif data.startswith(MAGIC_PARANOID):
        header = "mix-paranoid"
        header_len = len(MAGIC_PARANOID)
        memory, time = 2097152, 8
    elif data.startswith(MAGIC):
        header = "mix"
        header_len = len(MAGIC)
        memory, time = 2097152, 3
    else:
        print("Error: File is not a mix encrypted file.", file=sys.stderr)
        sys.exit(1)

    print(f"Header  {header}")

    pos = header_len
    salt = data[pos:pos+SALT_LEN]
    pos += SALT_LEN
    nonce = data[pos:pos+NONCE_LEN]
    pos += NONCE_LEN
    ciphertext = data[pos:-HMAC_TAG_LEN]
    hmac_tag = data[-HMAC_TAG_LEN:]

    print(f"Salt    {' '.join(salt.hex()[i:i+2] for i in range(0, len(salt.hex()), 2))}")
    print(f"Nonce   {' '.join(nonce.hex()[i:i+2] for i in range(0, len(nonce.hex()), 2))}")
    print(f"Cipher  {len(ciphertext)} bytes")
    print(f"HMAC    {len(hmac_tag)} bytes")
    print("Algo    AES-CTR + HMAC")
    print("PBKDF   Argon2id")
    print(f"MEMORY  {memory} bytes")
    print(f"TIME    {time} iterations")
    print("PARALL  1 threads")

def main():
    parser = argparse.ArgumentParser(description="Dump information about mix encrypted files.")
    parser.add_argument("input", type=Path, help="Input file")
    args = parser.parse_args()
    dump(args.input)

if __name__ == "__main__":
    main()
